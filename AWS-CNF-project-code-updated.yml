AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  Route53HostedZoneId:
    Type: String
    Description: Hosted Zone ID for Route 53
    Default: Z0380176135Y64HA0KRYM  # Replace with your actual Hosted Zone ID
  CertificateArn:
    Type: String
    Description: ARN of the existing SSL certificate
    Default: arn:aws:acm:us-east-1:302263045054:certificate/89df4c52-eb4c-4dca-8580-d8f0c9f550d2  # Replace with actual ARN
  SubdomainName:
    Type: String
    Description: Subdomain name for Route 53 record
    Default: prod.nellore.xyz  # Replace with your actual subdomain
  KeyPairName:
    Type: String
    Description: Name of the existing EC2 Key Pair
    Default: my-demo-project-key  # Replace with your actual key pair name

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs "" ]

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and HTTPS access
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          CidrIp: 10.0.0.0/16
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2CWAgentRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ["ec2.amazonaws.com"]
            Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: SecretAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: "*"

  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref IAMRole

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SecurityGroup
      Scheme: internet-facing
      Type: application

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup
      Port: 5000
      Protocol: HTTP
      VpcId: !Ref MyVPC
      TargetType: instance
      HealthCheckPath: "/"
##      Targets:
##        - Id: !Ref EC2Instance
##          Port: 80

  ListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTPS
      Port: 443
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  ListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            StatusCode: HTTP_301

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-071226ecf16aa7d96
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref PublicSubnet1
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref IAMInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -e
          sudo yum update -y
          sudo yum install -y git httpd jq aws-cli
          sudo systemctl enable httpd
          sudo systemctl start httpd

          sudo curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -
          sudo yum install -y nodejs

          # Clone Node.js App
          sudo mkdir -p /var/www/html
          sudo chown -R ec2-user:ec2-user /var/www
          cd /var/www/html
          sudo git clone https://github.com/prabareddy1996/mini_finance.git .
          sudo npm install

          # Fetch secrets from Secrets Manager and write to .env
          ENV_SECRET=$(aws secretsmanager get-secret-value --secret-id miniFinanceEnvVars --query SecretString --output text)
          echo "$ENV_SECRET" | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' > /var/www/html/backend/.env

          # Install and configure CloudWatch Agent
          sudo yum install -y amazon-cloudwatch-agent
          sudo mkdir -p /opt/aws/amazon-cloudwatch-agent/etc

          sudo cat <<EOF > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          {
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/www/html/app.log",
                      "log_group_name": "mini-app-logs",
                      "log_stream_name": "{instance_id}",
                      "timestamp_format": "%Y-%m-%d %H:%M:%S"
                    }
                  ]
                }
              }
            }
          }
          EOF

          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
            -a fetch-config \
            -m ec2 \
            -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \
            -s

          # Start the Node app
          cd backend
          sudo node server.js > /var/www/html/app.log 2>&1 &

  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref Route53HostedZoneId
      Name: !Ref SubdomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID

Outputs:
  EC2PublicIP:
    Description: "Public IP of the EC2 instance"
    Value: !GetAtt EC2Instance.PublicIp

  LoadBalancerDNS:
    Description: "DNS Name of the Load Balancer"
    Value: !GetAtt LoadBalancer.DNSName

  SubDomain:
    Description: "Access the application using the subdomain"
    Value: !Ref SubdomainName
